type Query {
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments: [Comment!]!
    me: User!
    post: Post!
}

type Mutation{
    createUser(data: CreateUserInput!): User!
    createPost(data:CreatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    updateUser(id:ID!, data: UpdateUserInput!):User!
    updatePost(id:ID!, data: UpdatePostInput!):Post!
    deleteUser(id:ID!): User!
    deletePost(id:ID!): Post!
    deleteComment(id:ID!):Comment!
}



input CreateUserInput{
    name: String!
    email: String!
    age:Int
}

input UpdateUserInput{
    name: String,
    email: String,
    age: Int,
}

input UpdatePostInput{
    title: String,
    body: String,
    published: Boolean,
}

input CreatePostInput{
    title: String!, 
    body:String!, 
    published:Boolean!, 
    author: ID!
}

input CreateCommentInput{
    text: String!, 
    author: ID!, 
    post: ID!
}

type User{
    id: ID!
    name: String!
    age: Int
    email: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Post{
    id: ID!
    title: String!
    body:String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

type Comment{
    id:ID!
    text: String!
    author: User!
    post: Post!
}

type Subscription {
    comment(postId: ID!): Comment!
    post: PostSubscriptionPayload!
}

type PostSubscriptionPayload{
    mutation:String!
    data: Post!
}